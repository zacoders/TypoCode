name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers only on versioned tags like v1.0, v2.1

permissions:
  contents: write  # This allows modifying releases
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11.x'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Build Windows executable
      if: runner.os == 'Windows'
      run: |
        cd src
        pyinstaller --onefile --noconsole --add-data "_content;src/_content" --icon=main.ico --name TypoCode main.py
      shell: cmd
      
    - name: Zip Windows executable with hash
      if: runner.os == 'Windows'
      run: |
        cd src/dist
        mkdir artifacts
    
        # Get the tag name like v0.5.5
        $tag = "${{ github.ref_name }}"
        $exe = "TypoCode.exe"
    
        # Generate SHA256 hash
        Get-FileHash $exe -Algorithm SHA256 | ForEach-Object {
          "$($_.Hash) *$exe" | Out-File -Encoding ASCII "$exe.sha256.txt"
        }
    
        # Zip exe and hash file with version in filename
        $zipName = "typocode-windows-$tag.zip"
        Compress-Archive -Path $exe, "$exe.sha256.txt" -DestinationPath "artifacts/$zipName

    # - name: Upload Windows artifact
    #   if: runner.os == 'Windows'
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: my-app-${{ runner.os }}
    #     path: src/dist/*

    - name: Build Linux executable
      if: runner.os == 'Linux'
      run: |
        cd src
        pyinstaller --onefile --noconsole --add-data "_content:src/_content" --name typocode main.py
      shell: bash

    - name: Package Linux App as .tar.gz
      if: runner.os == 'Linux'
      run: |      
        cd src/dist
        mkdir -p artifacts
        tar -czvf typocode-linux.tar.gz typocode
        mv typocode-linux.tar.gz artifacts/

    - name: Install appimage-builder
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y python3-pip
        pip install appimage-builder==1.1.0

    - name: Create Linux AppImage
      if: runner.os == 'Linux'
      run: |
        cd src/dist
        appimage-builder --recipe ../appimage.yml
        mv typocode--x86_64.AppImage artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: my-app-${{ runner.os }}
        path: src/dist/artifacts/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
